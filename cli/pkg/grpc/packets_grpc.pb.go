// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: packets.proto

package grpc

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PacketsClient is the client API for Packets service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PacketsClient interface {
	AddPackets(ctx context.Context, in *AddPacketsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type packetsClient struct {
	cc grpc.ClientConnInterface
}

func NewPacketsClient(cc grpc.ClientConnInterface) PacketsClient {
	return &packetsClient{cc}
}

func (c *packetsClient) AddPackets(ctx context.Context, in *AddPacketsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/packets.Packets/AddPackets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PacketsServer is the server API for Packets service.
// All implementations must embed UnimplementedPacketsServer
// for forward compatibility
type PacketsServer interface {
	AddPackets(context.Context, *AddPacketsRequest) (*empty.Empty, error)
	mustEmbedUnimplementedPacketsServer()
}

// UnimplementedPacketsServer must be embedded to have forward compatible implementations.
type UnimplementedPacketsServer struct {
}

func (UnimplementedPacketsServer) AddPackets(context.Context, *AddPacketsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPackets not implemented")
}
func (UnimplementedPacketsServer) mustEmbedUnimplementedPacketsServer() {}

// UnsafePacketsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PacketsServer will
// result in compilation errors.
type UnsafePacketsServer interface {
	mustEmbedUnimplementedPacketsServer()
}

func RegisterPacketsServer(s grpc.ServiceRegistrar, srv PacketsServer) {
	s.RegisterService(&Packets_ServiceDesc, srv)
}

func _Packets_AddPackets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPacketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PacketsServer).AddPackets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.Packets/AddPackets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PacketsServer).AddPackets(ctx, req.(*AddPacketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Packets_ServiceDesc is the grpc.ServiceDesc for Packets service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Packets_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "packets.Packets",
	HandlerType: (*PacketsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPackets",
			Handler:    _Packets_AddPackets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packets.proto",
}
